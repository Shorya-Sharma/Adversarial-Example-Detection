import numpy as np
from scipy.spatial.distance import cdist

def compute__mahalanobis(activations):
    """
    Computes the layer-wise Mahalanobis distance metric
    for the given activation values.

    Args:
        activations: numpy array of shape (num_examples, num_layers, layer_size)
            containing the activation values for each example in the batch and
            each layer in the model.

    Returns:
        mahalanobis_values: numpy array of shape (num_layers,) containing the
            Mahalanobis distance value for each layer.
    """
    num_examples, num_layers, layer_size = activations.shape
    mahalanobis_values = np.zeros(num_layers)

    for i in range(num_layers):
        # Compute covariance matrix
        cov_matrix = np.cov(activations[:, i], rowvar=False)

        # Compute inverse covariance matrix
        inv_cov_matrix = np.linalg.inv(cov_matrix)

        # Compute mean activation vector
        mean_vector = np.mean(activations[:, i], axis=0)

        # Compute Mahalanobis distances
        mahalanobis_dists = cdist(activations[:, i], np.expand_dims(mean_vector, axis=0), metric='mahalanobis', VI=inv_cov_matrix)

        # Compute Mahalanobis distance for layer
        mahalanobis_values[i] = np.mean(mahalanobis_dists)

    return mahalanobis_values






























































































































































































































































































































































































































































































































































































































































































































































































































































































































def compute_mahalanobis(activations):
  return torch.rand(64, 1, 16)


