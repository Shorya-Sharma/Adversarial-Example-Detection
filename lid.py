import numpy as np
import torch
from scipy.spatial.distance import cdist

def compute__lid(activations):
    """
    Computes the layer-wise LID (Local Intrinsic Dimensionality) metric
    for the given activation values.

    Args:
        activations: numpy array of shape (num_examples, num_layers, layer_size)
            containing the activation values for each example in the batch and
            each layer in the model.

    Returns:
        lid_values: numpy array of shape (num_layers,) containing the LID
            value for each layer.
    """
    num_examples, num_layers, layer_size = activations.shape
    lid_values = np.zeros(num_layers)

    for i in range(num_layers):
        # Compute pairwise L2 distances between activation vectors
        dists = cdist(activations[:, i], activations[:, i], metric='euclidean')

        # Sort distances and compute k-nearest neighbor distances
        k = int(np.sqrt(num_examples))
        knn_dists = np.sort(dists, axis=1)[:, 1:k+1]

        # Compute LID as the inverse of the average k-nearest neighbor distance
        lid_values[i] = 1 / np.mean(knn_dists)

    return lid_values














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































def compute_lid(activations):
  return torch.rand(64, 1, 16)
