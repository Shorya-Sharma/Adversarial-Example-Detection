import numpy as np
from scipy.spatial.distance import cdist
from scipy.stats import norm

def compute__mmd(activations):
    """
    Computes the layer-wise MMD (Maximum Mean Discrepancy) metric
    for the given activation values.

    Args:
        activations: numpy array of shape (num_examples, num_layers, layer_size)
            containing the activation values for each example in the batch and
            each layer in the model.

    Returns:
        mmd_values: numpy array of shape (num_layers,) containing the MMD
            value for each layer.
    """
    num_examples, num_layers, layer_size = activations.shape
    mmd_values = np.zeros(num_layers)

    for i in range(num_layers):
        # Compute pairwise L2 distances between activation vectors
        dists = cdist(activations[:, i], activations[:, i], metric='euclidean')

        # Compute median distance
        median_dist = np.median(dists)

        # Compute MMD
        mmd_values[i] = np.sum(norm.pdf(dists / median_dist)) / num_examples**2

    return mmd_values































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































def compute_mmd(activations):
  return torch.rand(64, 1, 16)